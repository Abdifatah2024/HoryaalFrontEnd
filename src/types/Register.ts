// Generated by https://quicktype.io

// export interface IRegisterResponse {
//   user: User[];
//   message: string;
// }

export interface IRegisterResponse {
  id: number;
  fullName: string;
  username: string;
  email: string;
  phoneNumber: string;
  password: string;
  confirmpassword: string;
  createdAt: Date;
  updatedAt: Date;
}
// Generated by https://quicktype.io

export interface IRegisterBody {
  username: string;
  email: string;
  password: string;
  fullName: string;
  phoneNumber: string;
  photoUrl: string;
  Role: string;
}

export interface AttendancePayload {
  studentId: string;
  present: boolean;
  remark: string;
}

// export interface Student {
//   id: number;
//   firstname: string;
//   middlename: string;
//   lastname: string;
//   fullname: string;
//   classId: number;
//   phone: string;
//   phone2?: string | null;
//   bus?: string | null;
//   address?: string | null;
//   previousSchool?: string | null;
//   motherName?: string | null;
//   gender: string;
//   Age: number;
//   fee: number;
//   status?: string | null;
//   absentCount?: number | null;
//   lastWarningDate?: string | null; // ISO date string
//   isdeleted: boolean;
//   userid: number;
// }
export interface Student {
  firstname: string;
  middlename?: string;
  lastname: string;
  fullname?: string;
  classId: string; // or number depending on your DB
  phone: string;
  phone2?: string;
  gender?: string;
  Age?: string | number;
  fee?: string | number;
  bus?: string; // âœ… Make sure this is string
  address?: string;
  previousSchool?: string;
  motherName?: string;
}

export interface RegisterStudentsResponse {
  message: string;
  students: Student[];
}

export interface NewStudentInput {
  firstname: string;
  middlename: string;
  lastname: string;
  fullname?: string; // optional, backend can generate
  classId: number;
  phone: string;
  phone2?: string;
  bus?: string;
  address?: string;
  previousSchool?: string;
  motherName?: string;
  gender: string;
  Age: number;
  fee: number;
  status?: string; // default is "ACTIVE"
}
export interface User {
  id: string;
  fullName: string;
  email: string;
  phoneNumber: string;
  photo: string;
  Role: "ADMIN" | "TEACHER" | "PARENT" | "STUDENT" | "USER"; // Adjust roles as needed
  createdAt?: string;
  updatedAt?: string;
}

// src/utils/formatters.ts
export const formatCurrency = (value: number) => {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  }).format(value);
};
